name: ci
env:
  TERM: xterm # Makes tput work in actions output

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
  pull_request: # Run CI for PRs on any branch
  merge_group:

jobs:
  ci-format:
    strategy:
      matrix:
        os: [ubuntu-latest]
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false # LVGL makefile manually installs the submodule
      - name: Disable wget progress output
        run: |
          echo "verbose = off" >> $HOME/.wgetrc
      - name: ci-format
        run: pushd examples; ./format_all.sh || exit; popd

  # Build on the newest-available OS with newest-available compilers
  ci-build-latest:
    strategy:
      matrix:
        os: [ubuntu-latest]
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Install latest ARM toolchains
      - uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: 'latest'
      # Install latest RISC-V toolchains, uses xPack
      # https://xpack-dev-tools.github.io/
      - name: setup-riscv-toolchain
        run: |
          npm install --location=global xpm@latest
          xpm install --global @xpack-dev-tools/riscv-none-elf-gcc@latest
          tree -a "$HOME/.local/xPacks/@xpack-dev-tools/riscv-none-elf-gcc/" || echo "nope"
          echo "$HOME/.local/xPacks/@xpack-dev-tools/riscv-none-elf-gcc/14.2.0-3.1/.content/bin" >> "$GITHUB_PATH"
      # Report what's installed
      - name: report-toolchain-versions
        run: |
          arm-none-eabi-gcc --version
          riscv-none-elf-gcc --version
      ###########################################
      # libtock-c specific build steps begin here
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Disable wget progress output
        run: |
          echo "verbose = off" >> $HOME/.wgetrc
      - name: ci-build
        run: pushd examples; ./build_all.sh || exit; popd
      - name: ci-debug-build
        run: pushd examples/blink; make debug RAM_START=0x20004000 FLASH_INIT=0x30051 || exit; popd

  # Build with compiler versions from the oldest current Ubuntu LTS
  ci-build-legacy:
    strategy:
      matrix:
        os: [ubuntu-22.04]
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    steps:
      # Install all toolchains with apt to ensure we are matching 'out of the box' LTS
      - name: install-toolchains
        run: sudo apt-get install -y gcc-arm-none-eabi gcc-riscv64-unknown-elf
      - name: report-toolchain-versions
        run: |
          arm-none-eabi-gcc --version
          riscv64-unknown-elf-gcc --version
      ###########################################
      # libtock-c specific build steps begin here
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: ci-build
        run: pushd examples; ./build_all.sh || exit; popd
      - name: ci-debug-build
        run: pushd examples/blink; make debug RAM_START=0x20004000 FLASH_INIT=0x30051 || exit; popd
